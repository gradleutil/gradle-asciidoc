/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package net.gradleutil.asciidoc

import spock.lang.Specification
import spock.lang.TempDir
import org.gradle.testkit.runner.GradleRunner

/**
 * A simple functional test for the 'net.gradleutil.asciidoc.greeting' plugin.
 */
class GradleAsciidocPluginFunctionalTest extends Specification {
    @TempDir
    private File projectDir

    private getBuildFile() {
        new File(projectDir, "build.gradle")
    }

    private getSettingsFile() {
        new File(projectDir, "settings.gradle")
    }

    private getReadmeFile() {
        new File(projectDir.path + '/src/docs/asciidoc/').with{
            mkdirs()
            return new File(it, "README.adoc")
        }
    }

    def "can run task"() {
        given:
        settingsFile << ""
        buildFile << """
plugins {
    id('net.gradleutil.gradle-asciidoc')
}
tasks.register('1someOtherTask'){
  group = '3. Some Group'
  description = 'Some Other Description'
}
tasks.register('3someThirdTask'){
  group = '3. Some Group'
  description = 'Some Third Description'
}
tasks.register('2someTask'){
  group = '4. Some Group'
  description = 'Some Description'
  dependsOn '3someThirdTask'
}
"""
        readmeFile << """
= Configuration

.Some Group tasks
[%header,format=csv,]
|===
Gradle Task,Description
|===

.Output of `{gradle} -version | head -12`
```
```
"""

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("docsUpdate", '-S')
        runner.withProjectDir(projectDir)
        def result = runner.build()

        then:
        result.output.contains("Updated asciiDoc task table")
        println readmeFile.text
    }

    def "can generate html"() {
        given:
        settingsFile << ""
        buildFile << """
plugins {
    id('net.gradleutil.gradle-asciidoc')
}
"""
        readmeFile << """
= Configuration

Lots of info goes here

"""

        when:
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("docs", '-S')
        runner.withProjectDir(projectDir)
        def result = runner.build()

        then:
        result.output.contains("Generated docbook")
        new File(projectDir,"build/docinfo/").with {
            it.listFiles().each {System.err.println it}
            exists()
        }
    }
}
