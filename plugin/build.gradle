plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id "com.gradle.plugin-publish" version "0.11.0"
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

version = "1.0.0.0"
group = 'net.gradleutil'

dependencies {
    api 'org.asciidoctor:asciidoctor-gradle-jvm:3.3.2'
    api 'org.asciidoctor:asciidoctor-gradle-base:3.3.2'
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

gradlePlugin {
    // Define the plugin
    plugins {
        gradleUtilAsciidoc {
            id = 'net.gradleutil.gradle-asciidoc'
            implementationClass = 'net.gradleutil.asciidoc.GradleUtilAsciidocPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/gradleutil/gradle-asciidoc'
    vcsUrl = 'https://github.com/gradleutil/gradle-asciidoc'
    description = 'Configure your Gradle builds with HOCON'
    tags = ['build-tool', 'configuration', 'json', 'json-schema', 'lightbend-conf', 'typesafe-conf']

    plugins {
        gradleUtilAsciidoc {
            id = 'net.gradleutil.gradle-asciidoc'
            displayName = 'Configure projects with HOCON'
        }
    }
}

tasks.withType(AbstractPublishToMaven) { publishTask ->
    def printInfo = { AbstractPublishToMaven task, String repoPath ->
        task.publication.with { p ->
            def sb = new StringBuilder()
            p.artifacts.each {
                String artifactPath = p.groupId.replace(".", "/") + "/" + p.artifactId + "/" + p.version + "/"
                sb.append('\n  ' + repoPath).append(artifactPath)
                        .append(p.artifactId).append('-' + p.version)
                        .append(it.classifier ? '-' + it.classifier : '').append('.' + it.extension)
            }
            logger.lifecycle("Published ${p.groupId}:${p.artifactId}:${p.version}${sb.toString()}")
        }
    }
    doLast {
        if (publishTask instanceof PublishToMavenRepository) {
            printInfo(publishTask, publishTask.repository.url.toString())
        } else {
            String repoPath = repositories.mavenLocal().url.toURL().getFile()
            printInfo(publishTask, repoPath)
        }
    }
}